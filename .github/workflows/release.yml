name: Create Release

on:
  push:
    branches: [ "master", "main" ]

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup GitHub CLI
      uses: cli/cli-action@v1
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.410
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build in Release mode
      id: build
      run: |
        dotnet build --configuration Release --no-restore
        if [ $? -eq 0 ]; then
          echo "build_success=true" >> $GITHUB_OUTPUT
        else
          echo "build_success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Get commit SHA
      id: get-commit-sha
      if: steps.build.outputs.build_success == 'true'
      run: echo "SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    
    - name: Create release zip file
      if: steps.build.outputs.build_success == 'true'
      run: |
        mkdir -p release
        # Copy both the library and demo executable with all dependencies
        cp -r CmdStarter.Demo/bin/Release/net7.0/* release/
        cd release
        zip -r ../CmdStarter-${{ steps.get-commit-sha.outputs.SHA }}.zip .
        cd ..
    
    - name: Check for existing release
      id: check-release
      if: steps.build.outputs.build_success == 'true'
      run: |
        CURRENT_SHA=$(git rev-parse HEAD)
        
        # Check if a release with this SHA already exists
        if gh release view "release-$(git rev-parse --short HEAD)" &>/dev/null; then
          echo "RELEASE_EXISTS=true" >> $GITHUB_OUTPUT
        else
          echo "RELEASE_EXISTS=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create GitHub Release
      if: steps.check-release.outputs.RELEASE_EXISTS != 'true' && steps.build.outputs.build_success == 'true'
      run: |
        gh release create \
          "release-${{ steps.get-commit-sha.outputs.SHA }}" \
          "./CmdStarter-${{ steps.get-commit-sha.outputs.SHA }}.zip" \
          --title "Release ${{ steps.get-commit-sha.outputs.SHA }}" \
          --notes "Automated release from commit ${{ steps.get-commit-sha.outputs.SHA }}\n\nThis release contains the binary output from the CmdStarter library."
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}